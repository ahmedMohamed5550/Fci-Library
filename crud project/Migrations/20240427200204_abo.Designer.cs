// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using crud_project.Data;

#nullable disable

namespace crud_project.Migrations
{
    [DbContext(typeof(libraryDbContext))]
    [Migration("20240427200204_abo")]
    partial class abo
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("crud_project.Models.admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("crud_project.Models.author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("age")
                        .HasColumnType("int");

                    b.Property<string>("img")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("crud_project.Models.book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("adminid")
                        .HasColumnType("int");

                    b.Property<double>("publishyear")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("adminid");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("crud_project.Models.bookauthor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("authorid")
                        .HasColumnType("int");

                    b.Property<int>("bookid")
                        .HasColumnType("int");

                    b.Property<int>("categoryid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("authorid");

                    b.HasIndex("bookid");

                    b.HasIndex("categoryid");

                    b.ToTable("Bookauthors");
                });

            modelBuilder.Entity("crud_project.Models.borrow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("bookid")
                        .HasColumnType("int");

                    b.Property<string>("borrowing_period")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("studentid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("bookid");

                    b.HasIndex("studentid");

                    b.ToTable("Borrows");
                });

            modelBuilder.Entity("crud_project.Models.category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("crud_project.Models.report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.Property<int>("bookid")
                        .HasColumnType("int");

                    b.Property<string>("rName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("rReport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("bookid");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("crud_project.Models.student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("crud_project.Models.book", b =>
                {
                    b.HasOne("crud_project.Models.admin", "Admin")
                        .WithMany("Books")
                        .HasForeignKey("adminid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("crud_project.Models.bookauthor", b =>
                {
                    b.HasOne("crud_project.Models.author", "Author")
                        .WithMany("Bookauthors")
                        .HasForeignKey("authorid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("crud_project.Models.book", "Book")
                        .WithMany("Bookauthors")
                        .HasForeignKey("bookid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("crud_project.Models.category", "Category")
                        .WithMany("bookauthors")
                        .HasForeignKey("categoryid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("crud_project.Models.borrow", b =>
                {
                    b.HasOne("crud_project.Models.book", "Book")
                        .WithMany("Borrows")
                        .HasForeignKey("bookid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("crud_project.Models.student", "Student")
                        .WithMany("Borrows")
                        .HasForeignKey("studentid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("crud_project.Models.report", b =>
                {
                    b.HasOne("crud_project.Models.book", "Book")
                        .WithMany("Reports")
                        .HasForeignKey("bookid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("crud_project.Models.admin", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("crud_project.Models.author", b =>
                {
                    b.Navigation("Bookauthors");
                });

            modelBuilder.Entity("crud_project.Models.book", b =>
                {
                    b.Navigation("Bookauthors");

                    b.Navigation("Borrows");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("crud_project.Models.category", b =>
                {
                    b.Navigation("bookauthors");
                });

            modelBuilder.Entity("crud_project.Models.student", b =>
                {
                    b.Navigation("Borrows");
                });
#pragma warning restore 612, 618
        }
    }
}
